<?php

namespace App\Http\Controllers;

use App\Models\CargoBid;
use App\Models\CargoLoading;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;

class CargoBidController extends Controller
{
    // üîπ –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –≥—Ä—É–∑
    public function store($locale, Request $request, CargoLoading $cargo)
    {
        $validator = Validator::make($request->all(), [
            'price' => 'nullable|integer|min:1',
            'with_vat_cashless' => 'nullable|integer|min:1',
            'without_vat_cashless' => 'nullable|integer|min:1',
            'cash' => 'nullable|integer|min:1',
            'currency' => 'nullable|string',
            'payment_comment' => 'nullable|string',
            'ready_date' => 'nullable|date|after_or_equal:today',
        ]);

        $validator->after(function ($validator) use ($request) {
            $hasAlt = $request->filled('with_vat_cashless') || $request->filled('without_vat_cashless') || $request->filled('cash');
            $hasPrice = $request->filled('price');

            if (!$hasPrice && !$hasAlt) {
                $validator->errors()->add('price', '–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã (—Å –ù–î–°, –±–µ–∑ –ù–î–°, –Ω–∞–ª–∏—á–Ω—ã–º–∏).');
            }
        });

        $validator->validate();

        if ($cargo->company->user_id == Auth::id()) {
            return response()->json(['status' => false, 'message' => '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≥—Ä—É–∑.']);
        }

        // –ß–µ–∫–∞–µ–º –µ—Å–ª–∏ –≥—Ä—É–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–µ–∑ —Ç–æ—Ä–≥–æ–≤, —Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ —É–±–∏—Ä–∞–µ–º —Å –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
//        if ($cargo->payment_type == 'no_haggling') {
//            $cargo->update(['status' => CargoLoading::COORDINATION]);
//        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è?
        if (CargoBid::where('cargo_loading_id', $cargo->id)->where('user_id', Auth::id())
            ->where('status', '!=', CargoBid::DECLINED)->exists()) {
            return response()->json(['status' => false, 'message' => '–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –≥—Ä—É–∑.']);
        }

        // –ü–æ–∫–∞ –¥–æ–±–∞–≤–∏–ª —Å—é–¥–∞ —á—Ç–æ–±—ã –≤—Å–µ —É—Ö–æ–¥–∏–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ
        $cargo->update(['status' => CargoLoading::COORDINATION]);

        CargoBid::create([
            'cargo_loading_id' => $cargo->id,
            'user_id' => Auth::id(),
            'price' => $request->price,
            'currency' => $request->currency,
            'payment_comment' => $request->payment_comment,
            'with_vat_cashless' => $request->with_vat_cashless,
            'without_vat_cashless' => $request->without_vat_cashless,
            'cash' => $request->cash,
            'status' => 'pending',
            'ready_date' => $request->ready_date,
            'prepayment_percent' => $request->prepayment_percent,
            'is_prepayment' => $request->is_prepayment ?? false,
            'is_on_unloading' => $request->is_on_unload ?? false,
            'is_bank_transfer' => $request->is_bank_transfer ?? false,
            'bank_transfer_days' => $request->bank_transfer_days,
        ]);

        return response()->json(['status' => true, 'message' => '–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.']);
    }

    // üü¢ –ì—Ä—É–∑–æ–≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç–∞–≤–∫—É
    public function accept($locale, CargoBid $bid)
    {
        $bid->update(['status' => 'accepted']);

        // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏:
        CargoBid::where('cargo_loading_id', $bid->cargo_loading_id)
            ->where('id', '!=', $bid->id)
            ->update(['status' => 'declined']);

        $bid->cargoLoading->update(['status' => CargoLoading::IN_PERFORMANCE]);

        return back()->with('success', '–û—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω.');
    }

    public function finish($locale, CargoLoading $cargoLoading)
    {
        // –ù–∞–π—Ç–∏ –ø—Ä–∏–Ω—è—Ç—ã–π –æ—Ç–∫–ª–∏–∫
        $acceptedBid = $cargoLoading->bids()->where('status', CargoBid::ACCEPTED)->first();

        if ($acceptedBid) {
            // –ó–∞–≤–µ—Ä—à–∏—Ç—å –µ–≥–æ
            $acceptedBid->update(['status' => CargoBid::FINISHED]);

            // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å
            CargoBid::where('cargo_loading_id', $cargoLoading->id)
                ->where('id', '!=', $acceptedBid->id)
                ->update(['status' => CargoBid::DECLINED]);
        }

        // –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥—Ä—É–∑ –≤ –∞—Ä—Ö–∏–≤
        $cargoLoading->update(['status' => CargoLoading::ARCHIVE]);

        return redirect()->route('—Åoordinations');
    }


    // üî¥ –ì—Ä—É–∑–æ–≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ –æ—Ç–º–µ–Ω—è–µ—Ç/–æ—Ç–∫–ª–æ–Ω—è–µ—Ç
    public function decline($locale, CargoBid $bid, Request $request)
    {
        $request->validate([
            'comment' => 'nullable|string|max:255',
            'archiveOption' => 'nullable|in:restore,keep',
        ]);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (Auth::id() != $bid->user_id && Auth::id() != $bid->cargoLoading?->company?->user?->id) {
            abort(403);
        }

        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞
        $bid->update([
            'status' => 'declined',
            'comment' => $request->comment,
        ]);

        // –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –≥—Ä—É–∑–æ–º
        if ($request->archiveOption === 'restore') {
            $bid->cargoLoading->update(['status' => CargoLoading::IN_PROGRESS]); // –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–±—Ä–∞—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞
        }

        return back()->with('success', '–û—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω.');
    }

}
